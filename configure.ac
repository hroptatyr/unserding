dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
m4_define([GIT_VERSION_GEN], [dnl
pushdef([version], [m4_esyscmd([./git-version-gen])])dnl
ifelse([]version[], [], [0.2.3], []version[])[]dnl
popdef([version])dnl
])
AC_INIT([unserding], [GIT_VERSION_GEN], [https://github.com/hroptatyr/unserding])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([src/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([src/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for unserding.
#### Copyright (C) 2008, 2009 Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign dist-xz])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## initialise our cool message nest levels
SXE_INIT_MSG_LEVEL

## the build chain
AC_PROG_CC([icc gcc clang tcc cc])
AC_PROG_CC_C99
AM_PROG_CC_C_O
SXE_CHECK_CFLAGS
## check for ld flags that we might need
SXE_CHECK_LDFLAGS

SXE_CHECK_PARSER_LEXER

## libtool goddess^Wgoodness
SXE_CHECK_LIBTOOL
SXE_CHECK_LIBLTDL

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])

## event loop
SXE_CHECK_LIBEV
AM_CONDITIONAL([HAVE_LIBEV], [test "${sxe_cv_feat_libev}" = "yes"])

### Check Input stuff
with_inputs_file="yes"
with_inputs_term="yes"
with_inputs_unix="yes"
with_inputs_tcpudp="yes"
with_inputs_multicast="yes"

## now go check the socket goodness
SXE_CHECK_SOCKETS
SXE_CHECK_SUFFICIENCY([unix], [unix domain sockets])
SXE_CHECK_SUFFICIENCY([sockets], [tcp/udp sockets])
SXE_CHECK_SUFFICIENCY([multicast], [multicast])

## evaluate the results
if test "$with_inputs_file" = "yes"; then
	have_inputs_file="yes"
fi
if test "$with_inputs_term" = "yes"; then
	have_inputs_term="yes"
fi
if test "$with_inputs_unix" = "yes"; then
	if test "$have_unix" = "yes"; then
		have_inputs_unix="yes"
	else
		have_inputs_unix="no"
	fi
fi
if test "$with_inputs_tcpudp" = "yes"; then
	if test "$have_sockets" = "yes"; then
		have_inputs_tcpudp="yes"
	else
		have_inputs_tcpudp="no"
	fi
fi
if test "$with_inputs_multicast" = "yes"; then
	if test "$have_multicast" = "yes"; then
		have_inputs_multicast="yes"
	else
		have_inputs_multicast="no"
	fi
fi

## final checks
if test "$have_inputs_term" = "yes" -a "$with_ansi_colours" != "no"; then
	if test "$with_ansi_colours" != "no"; then
		dnl SXE_CHECK_CURSES
		have_ansi_colours="yes"
		AC_DEFINE([HAVE_ANSI_COLOURS], [1], [Description here!])
	fi
	AC_DEFINE([WITH_INPUT_TERM], [1],
		[Whether to support traditional terminal input])
fi
AM_CONDITIONAL([WITH_INPUT_TERM],
	[test "$have_inputs_term" = "yes" -a "$with_inputs_term" = "yes"])
if test "$have_inputs_file" = "yes"; then
	AC_DEFINE([WITH_INPUT_FILE], [1],
		[Whether to support files as input source])
fi
AM_CONDITIONAL([WITH_INPUT_FILE],
	[test "$have_inputs_file" = "yes" -a "$with_inputs_file" = "yes"])
if test "$have_inputs_unix" = "yes"; then
	AC_DEFINE([WITH_INPUT_UNIX], [1],
		[Whether to support reading input from unix domain sockets])
fi
AM_CONDITIONAL([WITH_INPUT_UNIX],
	[test "$have_inputs_unix" = "yes" -a "$with_inputs_unix" = "yes"])
if test "$have_inputs_tcpudp" = "yes"; then
	AC_DEFINE([WITH_INPUT_TCPUDP], [1],
		[Whether to support reading input from TCP/UDP sockets])
fi
AM_CONDITIONAL([WITH_INPUT_TCPUDP],
	[test "$have_inputs_tcpudp" = "yes" -a "$with_inputs_tcpudp" = "yes"])
if test "$have_inputs_multicast" = "yes"; then
	AC_DEFINE([WITH_INPUT_MULTICAST], [1],
		[Whether to support reading input from multicast streams])
fi
AM_CONDITIONAL([WITH_INPUT_MULTICAST],
	[test "$have_inputs_multicast" = "yes" -a "$with_inputs_multicast" = "yes"])

## readline and friends
SXE_DUMP_LIBS
VL_LIB_READLINE
if test "${vl_cv_lib_readline}" != "no"; then
	LIBREADLINE_LIBS=${vl_cv_lib_readline}
fi
SXE_RESTORE_LIBS
AC_SUBST([LIBREADLINE_LIBS])
AC_SUBST([LIBREADLINE_LDFLAGS])
AC_SUBST([LIBREADLINE_CPPFLAGS])

## check if we've got libedit, we don't use it though at the moment
PKG_CHECK_MODULES([LIBEDIT], [libedit], [:], [:])
## check for lua, critical
PKG_CHECK_MODULES([LUA], [lua >= 5.1], [have_lua="yes"], [
	have_lua="no"
	if test "${enable_server}" = "yes"; then
		AC_MSG_WARN([server build request but lua missing.])
		enable_server="no"
	fi
])
AM_CONDITIONAL([HAVE_LUA], [test "${have_lua}" = "yes"])

## check for lua, critical
PKG_CHECK_MODULES([uterus], [libuterus >= 0.2.1],
	[have_uterus="yes"], [have_uterus="no"])
if test "${have_uterus}"; then
	## check for the header
	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${uterus_CFLAGS}"
	AC_CHECK_HEADERS([uterus.h])
	SXE_RESTORE_LIBS
fi
AM_CONDITIONAL([HAVE_UTERUS], [test "${have_uterus}" = "yes"])

## some deps
if test "${sxe_cv_feat_libev}" != "yes"; then
	enable_server="no"
	enable_cliapps="no"
fi

## just so we know what to build
AC_ARG_ENABLE([server], [
AS_HELP_STRING([--enable-server], [Build the server component, default: yes.])],
	[enable_server="${enableval}"], [enable_server="yes"])
AM_CONDITIONAL([BUILD_SERVER], [test "${enable_server}" = "yes"])

AC_ARG_ENABLE([cliapps], [
AS_HELP_STRING([--enable-cliapps], [Build the client apps, default: yes.])],
	[enable_cliapps="${enableval}"], [enable_cliapps="yes"])
AM_CONDITIONAL([BUILD_CLIAPPS], [test "${enable_cliapps}" = "yes"])

AC_ARG_ENABLE([library], [
AS_HELP_STRING([--enable-library], [Build the library component, default: yes.])],
	[enable_library="${enableval}"], [enable_library="yes"])
AM_CONDITIONAL([BUILD_LIBRARY], [test "${enable_library}" = "yes"])

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([cli/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([info/Makefile])
AC_CONFIG_FILES([unserding.pc])
AC_OUTPUT

if test -n "${BUILD_SERVER_FALSE}"; then
	BUILD_SRV="yes"
else
	BUILD_SRV="no"
fi
if test -n "${BUILD_LIBRARY_FALSE}"; then
	BUILD_LIB="yes"
else
	BUILD_LIB="no"
fi
if test -n "${BUILD_CLIAPPS_FALSE}"; then
	BUILD_CLI="yes"
else
	BUILD_CLI="no"
fi

echo
echo
echo "Build summary"
echo "============="
echo
echo "Build cliapps: ${BUILD_CLI}"
echo "Build server: ${BUILD_SRV}"
echo "Build library: ${BUILD_LIB}"
echo "Scripting engine: ${HAVE_LUA_FALSE:+lua}"
echo

dnl configure.ac ends here
