#! /bin/sh
# Copyright (c) 1995-2002 SuSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Author: Kurt Garloff <feedback@suse.de>
#
# /etc/init.d/unserding
#
#   and symbolic its link
#
# /(usr/)sbin/rcunserding
#
# LSB compliant service control script; see http://www.linuxbase.org/spec/
#
# System startup script for the unserding service
#
### BEGIN INIT INFO
# Provides: unserding
# Required-Start: $local_fs $remote_fs $syslog $network
# Required-Stop:  $local_fs $remote_fs $syslog $network
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Description:    Start the unserding service
### END INIT INFO
#
# Note on Required-Start: It does specify the init script ordering,
# not real dependencies. Depencies have to be handled by admin
# resp. the configuration tools (s)he uses.

# Source SuSE config (if still necessary, most info has been moved)
test -r /etc/rc.config && . /etc/rc.config

# Check for missing binaries (stale symlinks should not happen)
UNSERDING_BIN=/usr/sbin/unserdingd
test -x "${UNSERDING_BIN}" || exit 5

# Check for existence of needed config file and read it
## we expect the variable CONFFILE to be set and point at a
## lua config file suitable for unserding, see example.unserding.lua
UNSERDING_CONFIG=/etc/sysconfig/unserding
test -r "${UNSERDING_CONFIG}" || exit 6
. "${UNSERDING_CONFIG}"

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
#      rc_active	checks whether a service is activated by symlinks
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

PIDFILE=/var/run/unserding/unserding.pid
UNSERUSER=unser

case "$1" in
    start)
	echo -n "Starting unserding"
	## Start daemon with startproc(8). If this fails
	## the echo return value is set appropriate.

	# NOTE: startproc returns 0, even if service is
	# already running to match LSB spec.
	startproc -f -u "${UNSERUSER}" \
		"${UNSERDING_BIN}" -d -c "${CONFFILE}" -p "${PIDFILE}"

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down unserding"
	## Stop daemon with killproc(8) and if this fails
	## set echo the echo return value.

	killproc -TERM -p "${PIDFILE}" "${UNSERDING_BIN}"

	# Remember status and be verbose
	rc_status -v
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    status)
	echo -n "Checking for service unserding: "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running

	# NOTE: checkproc returns LSB compliant status values.
	checkproc -p "${PIDFILE}" "${UNSERDING_BIN}"
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|restart}"
	exit 1
	;;
esac
rc_exit
