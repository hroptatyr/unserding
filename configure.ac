dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.61])
AC_INIT([unserding], [0.1], [http://www.ga-group.nl])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([src/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([src/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for unserding.
#### Copyright (C) 2008, 2009 Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign])

## initialise our cool message nest levels
SXE_INIT_MSG_LEVEL

## the build chain
with_ridiculously_aggressive_optimisations="yes"
with_maximum_warning_output="yes"
with_omp="no"
SXE_CHECK_CC
SXE_CHECK_CFLAGS

## parser goodness
SXE_CHECK_PARSER_LEXER

## libtool goddess^Wgoodness
SXE_CHECK_LIBTOOL

## basic posix stuff
SXE_CHECK_BASIC_HEADERS
SXE_CHECK_BASIC_TYPES
SXE_CHECK_BASIC_FUNS

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])

## date time
SXE_CHECK_METRONOME

## event loop
SXE_CHECK_LIBEV

### Check Input stuff
with_inputs_file="yes"
with_inputs_term="yes"
with_inputs_unix="yes"
with_inputs_tcpudp="yes"
with_inputs_multicast="yes"

## now go check the socket goodness
SXE_CHECK_SOCKETS
SXE_CHECK_SUFFICIENCY([unix], [unix domain sockets])
SXE_CHECK_SUFFICIENCY([sockets], [tcp/udp sockets])
SXE_CHECK_SUFFICIENCY([multicast], [multicast])

## evaluate the results
if test "$with_inputs_file" = "yes"; then
	have_inputs_file="yes"
fi
if test "$with_inputs_term" = "yes"; then
	have_inputs_term="yes"
fi
if test "$with_inputs_unix" = "yes"; then
	if test "$have_unix" = "yes"; then
		have_inputs_unix="yes"
	else
		have_inputs_unix="no"
	fi
fi
if test "$with_inputs_tcpudp" = "yes"; then
	if test "$have_sockets" = "yes"; then
		have_inputs_tcpudp="yes"
	else
		have_inputs_tcpudp="no"
	fi
fi
if test "$with_inputs_multicast" = "yes"; then
	if test "$have_multicast" = "yes"; then
		have_inputs_multicast="yes"
	else
		have_inputs_multicast="no"
	fi
fi

## final checks
if test "$have_inputs_term" = "yes" -a "$with_ansi_colours" != "no"; then
	if test "$with_ansi_colours" != "no"; then
		dnl SXE_CHECK_CURSES
		have_ansi_colours="yes"
		AC_DEFINE([HAVE_ANSI_COLOURS], [1], [Description here!])
	fi
	AC_DEFINE([WITH_INPUT_TERM], [1],
		[Whether to support traditional terminal input])
fi
AM_CONDITIONAL([WITH_INPUT_TERM],
	[test "$have_inputs_term" = "yes" -a "$with_inputs_term" = "yes"])
if test "$have_inputs_file" = "yes"; then
	AC_DEFINE([WITH_INPUT_FILE], [1],
		[Whether to support files as input source])
fi
AM_CONDITIONAL([WITH_INPUT_FILE],
	[test "$have_inputs_file" = "yes" -a "$with_inputs_file" = "yes"])
if test "$have_inputs_unix" = "yes"; then
	AC_DEFINE([WITH_INPUT_UNIX], [1],
		[Whether to support reading input from unix domain sockets])
fi
AM_CONDITIONAL([WITH_INPUT_UNIX],
	[test "$have_inputs_unix" = "yes" -a "$with_inputs_unix" = "yes"])
if test "$have_inputs_tcpudp" = "yes"; then
	AC_DEFINE([WITH_INPUT_TCPUDP], [1],
		[Whether to support reading input from TCP/UDP sockets])
fi
AM_CONDITIONAL([WITH_INPUT_TCPUDP],
	[test "$have_inputs_tcpudp" = "yes" -a "$with_inputs_tcpudp" = "yes"])
if test "$have_inputs_multicast" = "yes"; then
	AC_DEFINE([WITH_INPUT_MULTICAST], [1],
		[Whether to support reading input from multicast streams])
fi
AM_CONDITIONAL([WITH_INPUT_MULTICAST],
	[test "$have_inputs_multicast" = "yes" -a "$with_inputs_multicast" = "yes"])

## database stuff ... does not belong here
AC_ARG_WITH([mysql], [
AS_HELP_STRING([--with-mysql], [Which mysql to use])], [], [])
dnl AC_ARG_WITH([pgsql], [
dnl AS_HELP_STRING([--with-pgsql], [Which postgres to use])], [], [])
dnl 
if test "$with_mysql" != "no"; then
	AC_PATH_PROG([MYSQL_CONFIG], [mysql_config], [:])
	MYSQL_CPPFLAGS=$(${MYSQL_CONFIG} --include)
	MYSQL_LDFLAGS=$(${MYSQL_CONFIG} --libs)
	AC_SUBST([MYSQL_CPPFLAGS])
	AC_SUBST([MYSQL_LDFLAGS])
	if test "${MYSQL_CONFIG}" != ":"; then
		AC_DEFINE([HAVE_MYSQL], [1], [Defined when mysql could be found])
	fi
	AC_DEFINE([WITH_MYSQL], [1], [Defined when mysql was desired])

	SXE_DUMP_LIBS
	CPPFLAGS="${CPPFLAGS} ${MYSQL_CPPFLAGS}"
	AC_CHECK_HEADERS([mysql/mysql.h mysql.h])
	SXE_RESTORE_LIBS
fi
AM_CONDITIONAL([USE_MYSQL], [test "$with_mysql" != "no" -a "${MYSQL_CONFIG}" != ":"])

## check for libffff
dnl AC_CHECK_FFFF
dnl AC_DEFINE([WITH_FFFF], [1], [Whether ffff support library is requested.])
dnl if test "${have_libffff}" = "yes"; then
dnl 	AC_DEFINE([HAVE_FFFF], [1], [Whether ffff support library is usable.])
dnl 	LDFLAGS="${LDFLAGS} ${LIBFFFF_LDFLAGS} ${LIBFFFF_LIBS}"
dnl 	CPPFLAGS="${CPPFLAGS} ${LIBFFFF_CPPFLAGS} -DUSE_FFFF"
dnl else
dnl 	AC_MSG_ERROR([ffff support is mandatory.])
dnl fi

## check for libpfack
AC_CHECK_PFACK
AC_DEFINE([WITH_PFACK], [1], [Whether libpfack support library is requested.])

## readline and friends
VL_LIB_READLINE
if test "${vl_cv_lib_readline}" != "no"; then
	LIBREADLINE_LIBS=${vl_cv_lib_readline}
fi
AC_SUBST([LIBREADLINE_LIBS])
AC_SUBST([LIBREADLINE_LDFLAGS])
AC_SUBST([LIBREADLINE_CPPFLAGS])

## check if we've got libedit, we don't use it though at the moment
PKG_CHECK_MODULES([LIBEDIT], [libedit], [:], [:])

## just so we know what to build
AC_ARG_ENABLE([server], [
AS_HELP_STRING([--enable-server], [Build the server component, default: no.])],
	[enable_server="no"], [enable_server="${ac_arg_enable}"])
AM_CONDITIONAL([BUILD_SERVER], [test "${enable_server}" = "yes"])
AC_ARG_ENABLE([cliapps], [
AS_HELP_STRING([--enable-cliapps], [Build the client apps, default: yes.])],
	[enable_cliapps="yes"], [enable_cliapps="${ac_arg_enable}"])
AM_CONDITIONAL([BUILD_CLIAPPS], [test "${enable_cliapps}" = "yes"])
AC_ARG_ENABLE([library], [
AS_HELP_STRING([--enable-library], [Build the library component, default: yes.])],
	[enable_library="yes"], [enable_library="${ac_arg_enable}"])
AM_CONDITIONAL([BUILD_LIBRARY], [test "${enable_library}" = "yes"])

## check if we've got libconfig
dnl PKG_CHECK_MODULES([LIBCONFIG], [libconfig])
## check for lua instead!

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([unserding.pc])
AC_OUTPUT

echo
echo
echo "Build summary"
echo "============="
echo
echo "Build server: ${BUILD_SERVER_FALSE:+yes}"
echo "Build cliapps: ${BUILD_CLIAPPS_TRUE:+yes}"
echo "Build library: ${BUILD_LIBRARY_TRUE:+yes}"
echo

dnl configure.ac ends here
